#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Nim revisited
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-gameTheory">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Introduction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Having authored our Nim-style game in Scratch, we will now try and convert this work into Python.
** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:
- We can start to build this using the same algorithm as we used last lesson, and build on it gently. 
#+begin_src
sticks=21
player=1

LOOP UNTIL sticks<1:
    The current <player> makes a move.
    Change the current player.
    PRINT How many sticks remain.
END LOOP

PRINT Winner
#+end_src
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The same idea can be seen in different places in human society. 
- Imagine a pair of competing fizzy drinks manufacturers. They both have two options when considering the sales of their products:
    - *Option 1:* Don't spend money on advertising. People know your product already, and are currently buying it at a steady rate. 
    - *Option 2:* Spend money on advertising. It'll cost money, but sales will increase.
- If both companies cooperate (option 1), they'll both enjoy steady profits and won't have to spend thousands of pounds on advertising.
- If one advertises and the other doesn't, one company will see their sales increase as the other company's sales (and profits) drop. 
- If both companies advertise, the effects of them both advertising will cancel each other out, and both companies will see their overall profits drop because of the money they're spending on advertising. 
- In real life, competing companies tend to advertise aggressively. 
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- In a new browser tab, open [[https://scratch.mit.edu/projects/84082932/#editor][this link]] to see a prisoner's dilemma simulator
- If you've a Scratch account, you can sign in to save the work you'll do here.
- If you've not got one, you can always click 'File -> Download to your computer' when you're finished to ensure your work is saved.
- Unfortunately, it looks like the developer didn't have time to finish the code, and there are some blanks. 
- Based on the rules set out above, can you complete the code and make the game work?
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
*** Silver
- Complete the code for the game.
*** Gold
- Modify the cat's strategy to be an 'angel'. It always stays silent, and never betrays the human player. 
- Develop a new 'Unpredictable puss' strategy for the cat, so that it betrays or stays silent at random. 
*** Platinum
- Modify the cat's strategy so that it holds a grudge...
- It will remain silent every time the game is played, until the human player betrays, then...
- It will then always betray the human player until the game is reset.
